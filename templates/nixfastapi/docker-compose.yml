services:
  nixfastapi:
    container_name: nixfastapi-container
    build:
      context: .
      dockerfile_inline: |
        # Nix builder
        FROM nixos/nix:latest AS builder

        # Copy our source and setup our working dir.
        COPY . /tmp/build
        WORKDIR /tmp/build

        # Build our Nix environment
        RUN nix \
            --extra-experimental-features "nix-command flakes" \
            --option filter-syscalls false \
            build .#packages.x86_64-linux.bundledApp

        # Copy the Nix store closure into a directory. The Nix store closure is the
        # entire set of Nix store values that we need for our build.
        RUN mkdir /tmp/nix-store-closure
        RUN cp -R $(nix-store -qR result/) /tmp/nix-store-closure

        # Final image is based on scratch. We copy a bunch of Nix dependencies
        # but they're fully self-contained so we don't need Nix anymore.
        FROM scratch

        WORKDIR /app

        # Copy /nix/store
        COPY --from=builder /tmp/nix-store-closure /nix/store
        COPY --from=builder /tmp/build/result /app
        CMD ["/app/main.py"]
    ports:
      - 8000:8000
    volumes:
      - nixfastapi-data:/data
    restart: no
    healthcheck:
      test: ["CMD", "/app/curl", "-f", "http://0.0.0.0:8000/"]
  
volumes:
  nixfastapi-data:
    driver: local

networks:
  default:
    name: nixfastapi-network
    external: false